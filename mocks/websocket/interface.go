// Code generated by MockGen. DO NOT EDIT.
// Source: degate/websocket/interface.go

// Package mock_websocket is a generated GoMock package.
package mock_websocket

import (
	reflect "reflect"

	model "github.com/degatedev/degate-sdk-golang/degate/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWsClient is a mock of WsClient interface.
type MockWsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWsClientMockRecorder
}

// MockWsClientMockRecorder is the mock recorder for MockWsClient.
type MockWsClientMockRecorder struct {
	mock *MockWsClient
}

// NewMockWsClient creates a new mock instance.
func NewMockWsClient(ctrl *gomock.Controller) *MockWsClient {
	mock := &MockWsClient{ctrl: ctrl}
	mock.recorder = &MockWsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsClient) EXPECT() *MockWsClientMockRecorder {
	return m.recorder
}

// SubscribeBookTicker mocks base method.
func (m *MockWsClient) SubscribeBookTicker(param *model.SubscribeBookTickerParam, handler func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeBookTicker", param, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeBookTicker indicates an expected call of SubscribeBookTicker.
func (mr *MockWsClientMockRecorder) SubscribeBookTicker(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBookTicker", reflect.TypeOf((*MockWsClient)(nil).SubscribeBookTicker), param, handler)
}

// SubscribeDepth mocks base method.
func (m *MockWsClient) SubscribeDepth(param *model.SubscribeDepthParam, handler func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeDepth", param, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeDepth indicates an expected call of SubscribeDepth.
func (mr *MockWsClientMockRecorder) SubscribeDepth(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeDepth", reflect.TypeOf((*MockWsClient)(nil).SubscribeDepth), param, handler)
}

// SubscribeDepthUpdate mocks base method.
func (m *MockWsClient) SubscribeDepthUpdate(param *model.SubscribeDepthUpdateParam, handler func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeDepthUpdate", param, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeDepthUpdate indicates an expected call of SubscribeDepthUpdate.
func (mr *MockWsClientMockRecorder) SubscribeDepthUpdate(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeDepthUpdate", reflect.TypeOf((*MockWsClient)(nil).SubscribeDepthUpdate), param, handler)
}

// SubscribeKline mocks base method.
func (m *MockWsClient) SubscribeKline(param *model.SubscribeKlineParam, handler func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeKline", param, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeKline indicates an expected call of SubscribeKline.
func (mr *MockWsClientMockRecorder) SubscribeKline(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeKline", reflect.TypeOf((*MockWsClient)(nil).SubscribeKline), param, handler)
}

// SubscribeTicker mocks base method.
func (m *MockWsClient) SubscribeTicker(param *model.SubscribeTickerParam, handler func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTicker", param, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeTicker indicates an expected call of SubscribeTicker.
func (mr *MockWsClientMockRecorder) SubscribeTicker(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTicker", reflect.TypeOf((*MockWsClient)(nil).SubscribeTicker), param, handler)
}

// SubscribeTrade mocks base method.
func (m *MockWsClient) SubscribeTrade(param *model.SubscribeTradeParam, handler func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTrade", param, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeTrade indicates an expected call of SubscribeTrade.
func (mr *MockWsClientMockRecorder) SubscribeTrade(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTrade", reflect.TypeOf((*MockWsClient)(nil).SubscribeTrade), param, handler)
}

// SubscribeUserData mocks base method.
func (m *MockWsClient) SubscribeUserData(param *model.SubscribeUserDataParam, handler func(string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeUserData", param, handler)
}

// SubscribeUserData indicates an expected call of SubscribeUserData.
func (mr *MockWsClientMockRecorder) SubscribeUserData(param, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeUserData", reflect.TypeOf((*MockWsClient)(nil).SubscribeUserData), param, handler)
}
